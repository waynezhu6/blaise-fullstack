{"version":3,"sources":["styles/Overlay.module.scss","styles/Map.module.scss","components/Pin.jsx","components/Overlay.jsx","lib/api.js","lib/hooks.js","components/Map.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Pin","props","size","fill","pinStyle","stroke","height","viewBox","style","d","React","Overlay","setLinear","from","to","checkbox","useRef","formatCoordinate","coord","lon","toFixed","lat","className","styles","body","onClick","e","stopPropagation","filter","title","info","borderLeft","current","checked","type","ref","state","defaultChecked","getOSRMRoute","a","coordinates","fetch","then","res","json","formatCoordinates","useOSRMRoute","useState","routes","setRoutes","key","console","log","geometry","mapboxgl","workerClass","require","default","Map","map","width","longitude","latitude","zoom","viewport","setViewport","setFrom","setTo","linear","useDebounce","linearDebounce","Date","now","last","setLast","lastDebounce","useEffect","MapboxGL","getMap","on","renderOSRMRoute","updateSize","window","addEventListener","removeEventListener","clearPath","getGeoJSONCoordinates","route","addSource","addLayer","getLayer","removeLayer","removeSource","minZoom","maxZoom","onViewportChange","nextViewport","mapboxApiAccessToken","draggable","offsetTop","offsetLeft","onDragStart","onDrag","lngLat","onDragEnd","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64bff615.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Overlay_body__31SYO\",\"filter\":\"Overlay_filter__9tSQJ\",\"title\":\"Overlay_title__UQnP3\",\"info\":\"Overlay_info__360ia\",\"checkbox\":\"Overlay_checkbox__1ySMi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Map_body__2zHHP\"};","import * as React from 'react';\r\n\r\n// icon svg from react-map-gl docs\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\nconst Pin = (props) => {\r\n  const {size = 20, fill = \"#DD0000\"} = props;\r\n\r\n  const pinStyle = {\r\n    fill,\r\n    stroke: 'none',\r\n  };\r\n\r\n  return (\r\n    <svg height={size} viewBox=\"0 0 24 24\" style={pinStyle}>\r\n      <path d={ICON} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default React.memo(Pin);","import React, { useRef } from 'react';\r\nimport styles from '../styles/Overlay.module.scss';\r\n\r\nconst Overlay = ({setLinear, from, to}) => {\r\n\r\n  const checkbox = useRef();\r\n\r\n  const onCheck = () => {\r\n    if(!checkbox.current) \r\n      return;\r\n    let state = checkbox.current.checked;\r\n    setLinear(!state);\r\n  }\r\n\r\n  const setCheck = () => {\r\n    if(!checkbox.current)\r\n      return;\r\n    checkbox.current.checked = !checkbox.current.checked;\r\n  }\r\n\r\n  const formatCoordinate = (coord) => {\r\n    return `${coord.lon.toFixed(4)}, ${coord.lat.toFixed(4)}`\r\n  }\r\n\r\n  return(\r\n    <div className={styles.body} onClick={(e) => e.stopPropagation()}>\r\n      <div className={styles.filter}>\r\n        \r\n        <div className={styles.title}>\r\n          Blaise Coding Challenge\r\n        </div> \r\n\r\n        <div className={styles.info} style={{borderLeft: \"4px solid #DD0000\"}}>\r\n          From: {formatCoordinate(from)}\r\n        </div>\r\n\r\n        <div className={styles.info} style={{borderLeft: \"4px solid #766DB1\"}}>\r\n          To: {formatCoordinate(to)}\r\n        </div>\r\n\r\n        <div className={styles.checkbox}>\r\n          <span onClick={setCheck}>View full walking route</span>\r\n          <input type=\"checkbox\" ref={checkbox} onClick={onCheck} defaultChecked={true}/>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Overlay;\r\n","// use OSRM's demo server\r\nconst API_ADDRESS = \"https://router.project-osrm.org/route/v1/driving/\";\r\n\r\nconst getOSRMRoute = async(from, to) => {\r\n  // fetches route from osrm api's route service\r\n  let coordinates =  `${from.lon},${from.lat};${to.lon},${to.lat}`;\r\n  let options = '?geometries=geojson&overview=full';\r\n  let res = await fetch(API_ADDRESS + coordinates + options)\r\n    .then(res => res.json());\r\n  return res;\r\n}\r\n\r\nexport default getOSRMRoute;","import { useState } from 'react';\r\nimport getOSRMRoute from './api';\r\n\r\nconst useOSRMRoute = () => {\r\n  // keep a memoized list of previously accessed coordinates\r\n  const [routes, setRoutes] = useState({});\r\n  \r\n  const getOSMRRoute = async(from, to) => {\r\n    let key = formatCoordinates(from, to);\r\n    if(key in routes){\r\n      console.log('memoized route');\r\n      return routes[key];\r\n    }\r\n    else{\r\n      let res = await getOSRMRoute(from, to);\r\n      setRoutes({...routes, [key]: res.routes[0].geometry.coordinates});\r\n      return res.routes[0].geometry.coordinates;\r\n    }\r\n  }\r\n\r\n  return getOSMRRoute;\r\n}\r\n\r\nconst formatCoordinates = (from, to) => {\r\n  // returns representation of coordinates to 3 significant digits\r\n  return `${from.lon.toFixed(3)},${from.lat.toFixed(3)};` +\r\n    `${to.lon.toFixed(3)},${to.lat.toFixed(3)}`;\r\n}\r\n\r\nexport default useOSRMRoute;","import React, { useState, useEffect, useRef } from 'react';\r\nimport ReactMapGL, { Marker } from 'react-map-gl';\r\nimport { useDebounce } from 'use-debounce';\r\nimport Pin from './Pin';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport styles from '../styles/Map.module.scss';\r\nimport Overlay from './Overlay';\r\nimport useOSRMRoute from '../lib/hooks';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\n\r\nconst Map = ( ) => {\r\n\r\n  const map = useRef(); // access underlying mapbox-gl object on mount\r\n\r\n  const [viewport, setViewport] = useState({\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    longitude: -79.3971,\r\n    latitude: 43.6597,\r\n    zoom: 12\r\n  });\r\n\r\n  const [from, setFrom] = useState({lon: -79.3971, lat: 43.6597});\r\n  const [to, setTo] = useState({lon: -79.337409, lat: 43.689225});\r\n  const getOSRMRoute = useOSRMRoute();\r\n\r\n  const [linear, setLinear] = useState(false); // true to display walking path\r\n  const [linearDebounce] = useDebounce(linear, 300);\r\n\r\n  const [last, setLast] = useState(Date.now()); // value for debouncing marker dragging\r\n  const [lastDebounce] = useDebounce(last, 300);\r\n\r\n  // draw initial route on load\r\n  useEffect(() => {\r\n    const MapboxGL = map.current.getMap();\r\n    console.log('loaded');\r\n    MapboxGL.on('load', () => renderOSRMRoute());\r\n\r\n    const updateSize = () => setViewport(viewport);\r\n    window.addEventListener('resize', updateSize);\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, []);\r\n\r\n  // redraw route when debounced values are changed\r\n  useEffect(() => {\r\n    console.log('recalculating route...');\r\n    clearPath();\r\n    renderOSRMRoute();\r\n  }, [lastDebounce, linearDebounce]);\r\n\r\n  const getGeoJSONCoordinates = async() => {\r\n    // return route coordinates\r\n    if(linear)\r\n      return [[from.lon, from.lat], [to.lon, to.lat]]\r\n\r\n    else{\r\n      let route = await getOSRMRoute(from, to);\r\n      return [\r\n        [from.lon, from.lat],\r\n        ...route,\r\n        [to.lon, to.lat]\r\n      ]\r\n    }\r\n  }\r\n\r\n  const renderOSRMRoute = async() => {\r\n    // render route line on map\r\n    if(!map.current)\r\n      return;\r\n\r\n    let coordinates = await getGeoJSONCoordinates();\r\n\r\n    try{\r\n      const MapboxGL = map.current.getMap();\r\n      MapboxGL.addSource('route', {\r\n        'type': 'geojson',\r\n        'data': {\r\n          'type': 'Feature',\r\n          'properties': {},\r\n          'geometry': {\r\n            'type': 'LineString',\r\n            'coordinates': coordinates\r\n          }\r\n        }\r\n      });\r\n  \r\n      MapboxGL.addLayer({\r\n        'id': 'route',\r\n        'type': 'line',\r\n        'source': 'route',\r\n        'layout': {\r\n          'line-join': 'round',\r\n          'line-cap': 'round'\r\n        },\r\n        'paint': {\r\n        'line-color': '#00CCAD',\r\n        'line-width': 4\r\n        }\r\n      });\r\n    }\r\n    catch(e){\r\n      console.log(e);\r\n    }\r\n\r\n  }\r\n\r\n  const clearPath = () => {\r\n    // remove existing paths\r\n    const MapboxGL = map.current.getMap();\r\n    if(MapboxGL.getLayer('route')){\r\n      MapboxGL.removeLayer('route');\r\n      MapboxGL.removeSource('route');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.body}>\r\n\r\n      <Overlay setLinear={setLinear} from={from} to={to}/>\r\n\r\n      <ReactMapGL\r\n        {...viewport}\r\n        minZoom={1}\r\n        maxZoom={16}\r\n        onViewportChange={nextViewport => setViewport(nextViewport)}\r\n        mapboxApiAccessToken={\"pk.eyJ1Ijoid2F5bmV6IiwiYSI6ImNrbDdmN3BtcTJteWsyb3BsNGt0YmpnZmYifQ.A-To5_8sa_6FqSTUW5TG1g\"}\r\n        ref={map}\r\n      >\r\n\r\n        <Marker\r\n          longitude={from.lon}\r\n          latitude={from.lat}\r\n          draggable\r\n          offsetTop={-40}\r\n          offsetLeft={-20}\r\n          onDragStart={() => clearPath()}\r\n          onDrag={(e) => setFrom({lon: e.lngLat[0], lat: e.lngLat[1]})}\r\n          onDragEnd={(e) => {\r\n            setFrom({lon: e.lngLat[0], lat: e.lngLat[1]});\r\n            setLast(Date.now());\r\n          }}\r\n        >\r\n          <Pin size={40} fill=\"#DD0000\"/>\r\n        </Marker>\r\n\r\n        <Marker\r\n          longitude={to.lon}\r\n          latitude={to.lat}\r\n          draggable\r\n          offsetTop={-40}\r\n          offsetLeft={-20}\r\n          onDragStart={() => clearPath()}\r\n          onDrag={(e) => setTo({lon: e.lngLat[0], lat: e.lngLat[1]})}\r\n          onDragEnd={(e) => {\r\n            setTo({lon: e.lngLat[0], lat: e.lngLat[1]});\r\n            setLast(Date.now());\r\n          }}\r\n        >\r\n          <Pin size={40} fill=\"#766DB1\"/>\r\n        </Marker>\r\n\r\n      </ReactMapGL>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Map/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}